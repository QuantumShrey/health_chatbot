# -*- coding: utf-8 -*-
"""hc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zejq7cEu0Hp-Fm0nEyxndU1P6ecNP3KV
"""

pip install streamlit

import streamlit as st
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, _tree

# Load datasets
training_dataset = pd.read_csv('Training.csv')
test_dataset = pd.read_csv('Testing.csv')
doc_dataset = pd.read_csv('doctors_dataset.csv', names=['Name', 'Description'])

# Preprocess data
X = training_dataset.iloc[:, :-1].values
y = training_dataset.iloc[:, -1].values
labelencoder = LabelEncoder()
y = labelencoder.fit_transform(y)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

# Train model
classifier = DecisionTreeClassifier()
classifier.fit(X_train, y_train)

# Save column info
dimensionality_reduction = training_dataset.groupby(training_dataset['prognosis']).max()
cols = training_dataset.columns[:-1]

diseases = dimensionality_reduction.index
doctors = pd.DataFrame({'disease': diseases, 'name': doc_dataset['Name'], 'link': doc_dataset['Description']})

def chatbot():
    st.title("Healthcare Diagnosis Chatbot")
    st.write("Please respond with 'Yes' or 'No' for the following symptoms.")

    symptoms_present = []
    def print_disease(node):
        val = node.nonzero()
        disease = labelencoder.inverse_transform(val[0])
        return disease

    def traverse_tree(node, depth=1):
        tree_ = classifier.tree_
        feature_name = [cols[i] if i != _tree.TREE_UNDEFINED else "undefined!" for i in tree_.feature]

        if tree_.feature[node] != _tree.TREE_UNDEFINED:
            name = feature_name[node]
            threshold = tree_.threshold[node]
            ans = st.radio(f"{name} ?", ('Yes', 'No'))
            val = 1 if ans == 'Yes' else 0
            if val <= threshold:
                traverse_tree(tree_.children_left[node], depth + 1)
            else:
                symptoms_present.append(name)
                traverse_tree(tree_.children_right[node], depth + 1)
        else:
            present_disease = print_disease(tree_.value[node])
            st.success(f"You may have: {present_disease[0]}")
            symptoms_given = dimensionality_reduction.columns[dimensionality_reduction.loc[present_disease].values[0].nonzero()]
            confidence_level = len(symptoms_present) / len(symptoms_given)
            st.write(f"Symptoms present: {symptoms_present}")
            st.write(f"Expected symptoms: {list(symptoms_given)}")
            st.write(f"Confidence Level: {confidence_level:.2f}")
            record = doctors[doctors['disease'] == present_disease[0]]
            st.write(f"Consult: {record['name'].values[0]}")
            st.write(f"Visit: {record['link'].values[0]}")

    if st.button("Start Diagnosis"):
        traverse_tree(0)

if __name__ == "__main__":
    chatbot()

streamlit run hc.py